{"remainingRequest":"/Users/lijiayu/Downloads/shangcheng-main/node_modules/babel-loader/lib/index.js!/Users/lijiayu/Downloads/shangcheng-main/src/api/api.js","dependencies":[{"path":"/Users/lijiayu/Downloads/shangcheng-main/src/api/api.js","mtime":1669541729000},{"path":"/Users/lijiayu/Downloads/shangcheng-main/node_modules/cache-loader/dist/cjs.js","mtime":1669614083651},{"path":"/Users/lijiayu/Downloads/shangcheng-main/node_modules/babel-loader/lib/index.js","mtime":1669614084006}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZy5qcyI7Ci8vIOivt+axguaOpeWPowppbXBvcnQgYXhpb3MgZnJvbSAiYXhpb3MiOwppbXBvcnQgcm91dGVyIGZyb20gJy4uL3JvdXRlcic7CmltcG9ydCB7IEVsTWVzc2FnZSB9IGZyb20gJ2VsZW1lbnQtcGx1cyc7IC8vIOiuvue9rum7mOiupOiuv+mXrui3r+W+hAoKYXhpb3MuZGVmYXVsdHMuYmFzZVVSTCA9IHByb2Nlc3MuZW52LlZVRV9BUFBfRVhURVJOQUxfTElOSzsKYXhpb3MuZGVmYXVsdHMudGltZW91dCA9IDIwMDA7IC8vIOWcqOWwgeijhWF4aW9z55qE5paH5Lu25Lit5re75Yqg5oum5oiq5ZmoCi8vIOa3u+WKoOivt+axguaLpuaIquWZqO+8jOWcqOivt+axguWktOS4reWKoHRva2VuCgpheGlvcy5pbnRlcmNlcHRvcnMucmVxdWVzdC51c2UoZnVuY3Rpb24gKGNvbmZpZykgewogIGNvbmZpZy5jYWNoZSA9IGZhbHNlOwogIHZhciB1c2VyTGlzdCA9IEpTT04ucGFyc2Uoc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbSgndXNlckxpc3QnKSk7IC8vIOWIpOaWreacrOWcsOeahGNvb2tpZeS4reaYr+WQpuaciXRva2VuCgogIGlmICh1c2VyTGlzdCkgewogICAgaWYgKHVzZXJMaXN0LnRva2VuKSB7CiAgICAgIGNvbmZpZy5oZWFkZXJzWydhdXRob3JpemF0aW9uJ10gPSB1c2VyTGlzdC50b2tlbjsKICAgIH0KICB9IGVsc2Ugey8vIOi3s+i9rOWIsOeZu+W9lemhtemdoijov5nph4zkvb/nlKhyb3V0ZXLvvIzmmK/lm6DkuLrot6/nlLHmlofku7blvJXlhaXliLDkuobmraTmlofku7bph4wpCiAgICAvLyByb3V0ZXIucHVzaCgnL2xvZ2luJykKICB9CgogIHJldHVybiBjb25maWc7Cn0sIGZ1bmN0aW9uIChlcnJvcikgewogIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7Cn0pOyAvLyDor7fmsYLmi6bmiKog5ZON5bqU5oum5oiqIEludGVyY2VwdG9ycyDmi6bmiKrlmagKCmF4aW9zLmludGVyY2VwdG9ycy5yZXNwb25zZS51c2UoZnVuY3Rpb24gKHJlcykgewogIGlmIChyZXMuZGF0YS5jb2RlID09IDQwMDEpIHsKICAgIHNlc3Npb25TdG9yYWdlLmNsZWFyKCk7CiAgICBFbE1lc3NhZ2UuZXJyb3IocmVzLmRhdGEubWVzc2FnZSk7CiAgICByb3V0ZXIucHVzaCgnL2xvZ2luJyk7CiAgfQoKICByZXR1cm4gcmVzLmRhdGE7Cn0sIGZ1bmN0aW9uIChlcnIpIHsKICBQcm9taXNlLnJlamVjdChlcnIpOwp9KTsKZXhwb3J0IGRlZmF1bHQgYXhpb3M7"},{"version":3,"sources":["/Users/lijiayu/Downloads/shangcheng-main/src/api/api.js"],"names":["axios","router","ElMessage","defaults","baseURL","process","env","VUE_APP_EXTERNAL_LINK","timeout","interceptors","request","use","config","cache","userList","JSON","parse","sessionStorage","getItem","token","headers","error","Promise","reject","response","res","data","code","clear","message","push","err"],"mappings":";AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,SAASC,SAAT,QAA0B,cAA1B,C,CACA;;AACAF,KAAK,CAACG,QAAN,CAAeC,OAAf,GAAyBC,OAAO,CAACC,GAAR,CAAYC,qBAArC;AACAP,KAAK,CAACG,QAAN,CAAeK,OAAf,GAAyB,IAAzB,C,CACA;AACA;;AACAR,KAAK,CAACS,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CAA+B,UAAAC,MAAM,EAAI;AACrCA,EAAAA,MAAM,CAACC,KAAP,GAAe,KAAf;AACA,MAAIC,QAAQ,GAAEC,IAAI,CAACC,KAAL,CAAWC,cAAc,CAACC,OAAf,CAAuB,UAAvB,CAAX,CAAd,CAFqC,CAGnC;;AACF,MAAIJ,QAAJ,EAAc;AACV,QAAGA,QAAQ,CAACK,KAAZ,EAAkB;AACdP,MAAAA,MAAM,CAACQ,OAAP,CAAe,eAAf,IAAiCN,QAAQ,CAACK,KAA1C;AACH;AACJ,GAJD,MAIO,CACH;AACA;AACH;;AACD,SAAOP,MAAP;AACC,CAbL,EAcI,UAAAS,KAAK,EAAI;AACP,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACL,CAhBD,E,CAkBA;;AACArB,KAAK,CAACS,YAAN,CAAmBe,QAAnB,CAA4Bb,GAA5B,CACI,UAACc,GAAD,EAAS;AACL,MAAGA,GAAG,CAACC,IAAJ,CAASC,IAAT,IAAe,IAAlB,EAAuB;AACnBV,IAAAA,cAAc,CAACW,KAAf;AACA1B,IAAAA,SAAS,CAACmB,KAAV,CAAgBI,GAAG,CAACC,IAAJ,CAASG,OAAzB;AACA5B,IAAAA,MAAM,CAAC6B,IAAP,CAAY,QAAZ;AACH;;AACD,SAAOL,GAAG,CAACC,IAAX;AACH,CARL,EASI,UAACK,GAAD,EAAS;AACLT,EAAAA,OAAO,CAACC,MAAR,CAAeQ,GAAf;AACH,CAXL;AAcA,eAAe/B,KAAf","sourcesContent":["// 请求接口\nimport axios from \"axios\";\nimport router from '../router'\nimport { ElMessage } from 'element-plus'\n// 设置默认访问路径\naxios.defaults.baseURL = process.env.VUE_APP_EXTERNAL_LINK;\naxios.defaults.timeout = 2000;\n// 在封装axios的文件中添加拦截器\n// 添加请求拦截器，在请求头中加token\naxios.interceptors.request.use(config => {\n    config.cache = false\n    let userList= JSON.parse(sessionStorage.getItem('userList'))\n      // 判断本地的cookie中是否有token\n    if (userList) {\n        if(userList.token){\n            config.headers['authorization'] =userList.token\n        }\n    } else {\n        // 跳转到登录页面(这里使用router，是因为路由文件引入到了此文件里)\n        // router.push('/login')\n    }\n    return config\n    },\n    error => {\n      return Promise.reject(error)\n})\n  \n// 请求拦截 响应拦截 Interceptors 拦截器\naxios.interceptors.response.use(\n    (res) => {\n        if(res.data.code==4001){\n            sessionStorage.clear()\n            ElMessage.error(res.data.message);\n            router.push('/login')\n        }\n        return res.data;\n    },\n    (err) => {\n        Promise.reject(err);\n    }\n);\n\nexport default axios"]}]}