{"remainingRequest":"/Users/lijiayu/alijiayu/jiayuan/shangcheng-main/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/Users/lijiayu/alijiayu/jiayuan/shangcheng-main/src/components/form-init/index.vue?vue&type=style&index=0&id=049a07dc&lang=less","dependencies":[{"path":"/Users/lijiayu/alijiayu/jiayuan/shangcheng-main/src/components/form-init/index.vue","mtime":1669541729000},{"path":"/Users/lijiayu/alijiayu/jiayuan/shangcheng-main/node_modules/css-loader/dist/cjs.js","mtime":1669614083819},{"path":"/Users/lijiayu/alijiayu/jiayuan/shangcheng-main/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/stylePostLoader.js","mtime":1669614084206},{"path":"/Users/lijiayu/alijiayu/jiayuan/shangcheng-main/node_modules/postcss-loader/src/index.js","mtime":1669614083990},{"path":"/Users/lijiayu/alijiayu/jiayuan/shangcheng-main/node_modules/less-loader/dist/cjs.js","mtime":1669614083923},{"path":"/Users/lijiayu/alijiayu/jiayuan/shangcheng-main/node_modules/cache-loader/dist/cjs.js","mtime":1669614083651},{"path":"/Users/lijiayu/alijiayu/jiayuan/shangcheng-main/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/index.js","mtime":1669614084013}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CiAgLmZvcm0tYm94IHsKICAgIGRpc3BsYXk6IGZsZXg7CiAgICBmbGV4LXdyYXA6IHdyYXA7CiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47CiAgICB3aWR0aDogMTAwJTsKICAgIC5mb3JtLXdpZHRoc3sKICAgICAgd2lkdGg6IDEwMCU7CiAgICB9CiAgfQogIAo="},{"version":3,"sources":["/Users/lijiayu/alijiayu/jiayuan/shangcheng-main/src/components/form-init/index.vue"],"names":[],"mappings":";EA2UE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;IACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IACb,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IACf,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC9B,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACV,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IACb;EACF","file":"/Users/lijiayu/alijiayu/jiayuan/shangcheng-main/src/components/form-init/index.vue","sourceRoot":"","sourcesContent":["<template>\n  <template v-if=\"formData.length\">\n    <el-form\n      :model=\"ruleForm\"\n      status-icon\n      :rules=\"rules\"\n      ref=\"refFormInit\"\n      label-width=\"120px\"\n      class=\"form-box\"\n    >\n      <template v-for=\"(item, index) in formData\" :key=\"index\"  class=\"el-form-item-boxs\">\n        <el-form-item\n          :label=\"item.label\"\n          :prop=\"item.formModel\"\n          v-if=\"item.editlist == 1\"\n          :style=\"itemClassFun(item)\"\n        >\n          <!-- 自定义插槽 -->\n          <template v-if=\"item.type == 'custom'\">\n            <slot :name=\"item.customName\" :item=\"item\" :ruleForm=\"ruleForm\"  ></slot>\n          </template>\n          <!-- input输入框 -->\n          <template v-if=\"item.type == 'text' || item.type == 'password'||item.type == 'textarea'\">\n            <el-input\n              :type=\"item.type\"\n              v-model=\"ruleForm[item.formModel]\"\n              :placeholder=\"item.placeholder\"\n              :disabled=\"item.disabled == 1\"\n              @input=\"typeChange({\n                type:item.type,\n                key: item.formModel,\n                label: item.label,\n                value: ruleForm[item.formModel],\n                items: item,\n              })\" \n            ></el-input>\n          </template>\n          <!-- 下拉框 -->\n          <template v-if=\"item.type == 'select'\">\n            <el-select\n              v-model=\"ruleForm[item.formModel]\"\n              :placeholder=\"item.placeholder\"\n              :multiple='item.multiple'\n              filterable\n              class=\"form-widths\"\n              @change=\"typeChange({\n                type:item.type,\n                key: item.formModel,\n                label: item.label,\n                value: ruleForm[item.formModel],\n                items: item,\n                option: selectOption[item.formModel]\n              })\" \n            >\n              <template v-for=\"(items,indexs) in selectOption[item.formModel]\" :key=\"indexs\">\n                  <el-option :label=\"items.dicValue\" :value=\"items.dicKey\"></el-option>\n              </template>\n            </el-select>\n          </template>\n          <!-- 开关 -->\n          <template v-if=\"item.type == 'switch'\">\n             <el-switch \n              v-model=\"ruleForm[item.formModel]\" \n              active-color=\"#13ce66\" \n              inactive-color=\"#ff4949\"\n               class=\"form-widths\"\n              @change=\"typeChange({\n                type:item.type,\n                key: item.formModel,\n                label: item.label,\n                value: ruleForm[item.formModel],\n                items: item,\n              })\" \n              ></el-switch>\n          </template>\n          <!-- 日期格式 -->\n          <template v-if=\"item.type == 'date'\">\n            <el-date-picker\n              class=\"form-widths\"\n              v-model=\"ruleForm[item.formModel]\" \n              :type=\"item.attributes['type']?item.attributes['type']:item.type\"\n              :placeholder=\"item.placeholder\"\n              :shortcuts=\"item.attributes['shortcuts']\"\n              :format=\"item.attributes['format']\"\n              :value-format=\"item.attributes['valueFormat']\"\n              :disabled-date=\"item.attributes['disabledDate']\"\n              :readonly=\"item.attributes['readonly']\"\n              :range-separator=\"item.attributes['rangeSeparator']\"\n              :default-time=\"item.attributes['defaultTime']\"\n              :start-placeholder=\"item.attributes['startPlaceholder']\"\n              :end-placeholder=\"item.attributes['endPlaceholder']\"\n              :default-value=\"item.attributes['defaultValue']\"\n              :unlink-panels=\"item.attributes['unlinkPanels']\"\n              :prefix-icon=\"item.attributes['prefixIcon']\"\n              :clear-icon=\"item.attributes['clearIcon']\"\n              @change=\"typeChange({\n                type:item.type,\n                key: item.formModel,\n                label: item.label,\n                value: ruleForm[item.formModel],\n                items: item,\n              })\" \n            >\n            </el-date-picker>\n          </template>\n          <!-- 多选框 -->\n          <template v-if=\"item.type == 'checkbox'\">\n              <el-checkbox-group v-model=\"ruleForm[item.formModel]\"  class=\"form-widths\">\n                <template v-for=\"(itemRadio,indexss) in selectOption[item.formModel]\" :key='indexss'>\n                  <el-checkbox :label=\"itemRadio.dicKey\" name=\"type\">{{itemRadio.dicValue}}</el-checkbox>\n                </template>\n              </el-checkbox-group>\n          </template>\n          <!-- 单选框 -->\n          <template v-if=\"item.type=='radio'\"  class=\"form-widths\">\n            <el-radio-group v-model=\"ruleForm[item.formModel]\">\n              <template v-for=\"(itemRadio,indexss) in selectOption[item.formModel]\" :key='indexss'>\n                  <el-radio :label=\"itemRadio.dicKey\" >{{itemRadio.dicValue}}</el-radio>\n              </template>\n            </el-radio-group>\n          </template>\n          <!-- 按钮 -->\n          <template v-if=\"item.type == 'button'\"  class=\"form-widths\">\n            <el-button\n              :type=\"item.btnType\"\n              @click=\"btns(item.btnFun)\"\n              :disabled=\"item.disabled == 1\"\n            >\n              {{ item.text }}\n            </el-button>\n          </template>\n        </el-form-item>\n      </template>\n    </el-form>\n  </template>\n</template>\n\n<script>\nimport {postUserFormConfiguration,postUserDictionaryPage} from '@/api/user'\nexport default {\n  props: [\"formPage\",'formInitDatas'],\n  data() {\n    return {\n      ruleForm: {},\n      formData: [],\n      rules: {},\n      selectOption:{},\n      selectCustomList:[],\n    };\n  },\n  created() {\n    // 获取表单数据\n    if(!this.formPage.formId){\n       this.formInit(this.formInitDatas);\n    }else{\n        // 这里是表单数据处理方法\n        this.postUserFormConfigurations()\n    }\n   \n  },\n\n  methods: {\n    // 计算是否一行显示几个\n    itemClassFun(data){\n      // console.log(data);\n      // 占有列数\n      // let list =  this.formData.filter(item=>item.occupiedColumns>1)\n      // console.log(list)\n     let  fromList = JSON.parse(JSON.stringify(this.formData))\n     let list =fromList.sort((obj1,obj2)=>{\n        return obj2.occupiedColumns - obj1.occupiedColumns\n      })\n     let foccupiedColumns =  list[0].occupiedColumns\n      let  width= 100;\n      if(foccupiedColumns){\n         width = 100/foccupiedColumns;\n      }\n\n      if(data.occupiedColumns>1){\n        width = width*data.occupiedColumns\n      }\n      return  {\n         width:`${width}%`,\n      };\n    },\n    async postUserFormConfigurations (){\n      let data = await postUserFormConfiguration({formId:this.formPage.formId})\n      if (data.code == 2000) {\n        if(data.data.length==0){\n           this.$message.error(data.message);\n        }\n        // 这里是表单数据处理方法\n        this.formInit(data.data);\n      \n      } else {\n        this.$message.error(data.message);\n      }\n    },\n    formInit(arr) {\n      let ruleFormObj = {};\n      let rulesObj = {};\n      arr.map((item) => {\n        // 是否需要字典\n        if(item.type == \"select\"||item.type == \"radio\"||item.type == \"checkbox\"){\n          this.selectOption[item.formModel]=[]\n          if(item.selectCustom==1){\n            this.selectCustomList.push({key:item.dictionaryKey,formModel:item.formModel})\n          }\n        }\n        // 是否有自定义属性\n        item['attributes'] = {};\n        if(this.formPage?.attributes){\n          item.attributes = this.formPage.attributes[item.formModel]?this.formPage.attributes[item.formModel]:{}\n        }\n        // 是否是按钮功能\n        if (item.editlist != 0 && item.type != \"button\") {\n          if(item.type == 'checkbox'){\n            ruleFormObj[item.formModel] = item.dicDefault?item.dicDefault.split(','):[];\n          }else{\n            ruleFormObj[item.formModel] = item.dicDefault?item.dicDefault:\"\";\n          }\n        }\n\n        // 是否进行校验\n        if (item.isCheck == 1) {\n          // 系统配置交易 并且 隐藏不进行校验\n          if (item.editlist != 0 && item.type != \"button\") {\n            let rulesItemArr = [];\n            let propValidator = this.formPage.validator;\n            item.rules.map((rulesItem) => {\n              let obj = {};\n              // 自定义校验\n              if (rulesItem.isValidator == 1) {\n                obj = {\n                  required: rulesItem.required == 1 ? true : false,\n                  validator: propValidator[rulesItem.validator],\n                  trigger: rulesItem.trigger,\n                };\n              } else {\n                obj = {\n                  required: rulesItem.required == 1 ? true : false,\n                  message: rulesItem.message,\n                  trigger: rulesItem.trigger,\n                };\n                if (rulesItemArr.length) {\n                  delete obj.required;\n                }\n                if (rulesItem.type) {\n                  obj.type = rulesItem.type;\n                }\n                if (rulesItem.min) {\n                  obj.min = rulesItem.min;\n                }\n                if (rulesItem.max) {\n                  obj.max = rulesItem.max;\n                }\n              }\n              rulesItemArr.push(obj);\n            });\n            rulesObj[item.formModel] = rulesItemArr;\n          }\n        }\n      });\n      this.ruleForm = ruleFormObj;\n      this.rules = rulesObj;\n      this.formData = arr;\n      // 获取字典\n      this.dictionary();\n    \n    },\n    // 获取字典表单获取字典值\n    async dictionary(){\n      let list =[]\n       this.selectCustomList.map(items=>{\n         let isItems = list.some(keys=>keys==items.key)\n         if(!isItems){\n           list.push(items.key)\n         }\n       })\n        let data = await postUserDictionaryPage({list:list})\n        if(data.code==2000){\n           this.selectCustomList.map(item=>{\n              this.selectOption[item.formModel] =data.data[item.key];\n            })\n        }else{\n           this.$message.error(data.message);\n        }\n    },\n    // 设置自定义下拉框值\n    setOption(key,option){\n       this.selectOption[key] = option;\n    },\n    // 设置值\n    setVaule(key,vaule){\n      this.ruleForm[key] = vaule\n    },\n    // 获取值\n    getVaule(key){\n       return this.ruleForm[key]\n    },\n    typeChange(event){\n      this.$emit('typeChange',event)\n    },\n    formValidate() {\n      let isValid = false;\n      this.$refs.refFormInit.validate((valid) => {\n        if (valid) {\n          isValid = valid;\n        } else {\n          isValid = false;\n          return false;\n        }\n      });\n      return isValid;\n    },\n    // 获取值\n    getData() {\n      return this.ruleForm;\n    },\n    // \n    validateField(item) {\n      this.$refs.refFormInit.validateField(item);\n    },\n    // 按钮时间\n    btns(data) {\n      this.$emit(\"formBtn\", data);\n    },\n  },\n};\n</script>\n<style lang=\"less\">\n  .form-box {\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: space-between;\n    width: 100%;\n    .form-widths{\n      width: 100%;\n    }\n  }\n  \n</style>\n"]}]}