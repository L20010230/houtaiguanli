{"remainingRequest":"/Users/lijiayu/alijiayu/jiayuan/shangcheng-main/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/Users/lijiayu/alijiayu/jiayuan/shangcheng-main/src/views/login/Identify.vue?vue&type=style&index=0&id=75a272a8&lang=less&scoped=true","dependencies":[{"path":"/Users/lijiayu/alijiayu/jiayuan/shangcheng-main/src/views/login/Identify.vue","mtime":1669541729000},{"path":"/Users/lijiayu/alijiayu/jiayuan/shangcheng-main/node_modules/css-loader/dist/cjs.js","mtime":1669614083819},{"path":"/Users/lijiayu/alijiayu/jiayuan/shangcheng-main/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/stylePostLoader.js","mtime":1669614084206},{"path":"/Users/lijiayu/alijiayu/jiayuan/shangcheng-main/node_modules/postcss-loader/src/index.js","mtime":1669614083990},{"path":"/Users/lijiayu/alijiayu/jiayuan/shangcheng-main/node_modules/less-loader/dist/cjs.js","mtime":1669614083923},{"path":"/Users/lijiayu/alijiayu/jiayuan/shangcheng-main/node_modules/cache-loader/dist/cjs.js","mtime":1669614083651},{"path":"/Users/lijiayu/alijiayu/jiayuan/shangcheng-main/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/index.js","mtime":1669614084013}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CnMtY2FudmFzIHsKICBoZWlnaHQ6IDM4cHg7Cn0K"},{"version":3,"sources":["/Users/lijiayu/alijiayu/jiayuan/shangcheng-main/src/views/login/Identify.vue"],"names":[],"mappings":";AA2JA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;EACP,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AACd","file":"/Users/lijiayu/alijiayu/jiayuan/shangcheng-main/src/views/login/Identify.vue","sourceRoot":"","sourcesContent":["<template>\n  <div>\n  <canvas\n      id=\"s-canvas\"\n      :width=\"contentWidth\"\n      :height=\"contentHeight\"></canvas>\n  </div>\n</template>\n<script>\nexport default {\n  name: \"identify\",\n  props: {\n    identifyCode: {\n      type: String,\n      default: ''\n    },\n    fontSizeMin: {\n      type: Number,\n      default: 28\n    },\n    fontSizeMax: {\n      type: Number,\n      default: 40\n    },\n    backgroundColorMin: {\n      type: Number,\n      default: 180\n    },\n    backgroundColorMax: {\n      type: Number,\n      default: 240\n    },\n    colorMin: {\n      type: Number,\n      default: 50\n    },\n    colorMax: {\n      type: Number,\n      default: 160\n    },\n    lineColorMin: {\n      type: Number,\n      default: 40\n    },\n    lineColorMax: {\n      type: Number,\n      default: 180\n    },\n    dotColorMin: {\n      type: Number,\n      default: 0\n    },\n    dotColorMax: {\n      type: Number,\n      default: 255\n    },\n    contentWidth: {\n      type: Number,\n      default: 130\n    },\n    contentHeight: {\n      type: Number,\n      default: 40\n    }\n  },\n  methods:{\n    // 生成一个随机数\n    randomNum (min, max) {\n      return Math.floor(Math.random() * (max - min) + min)\n    },\n    // 生成一个随机的颜色\n    randomColor (min, max) {\n      let r = this.randomNum(min, max)\n      let g = this.randomNum(min, max)\n      let b = this.randomNum(min, max)\n      return 'rgb(' + r + ',' + g + ',' + b + ')'\n    },\n    drawPic () {\n      let canvas = document.getElementById('s-canvas')\n      let ctx = canvas.getContext('2d')\n      ctx.textBaseline = 'bottom'\n      // 绘制背景\n      ctx.fillStyle = this.randomColor(\n          this.backgroundColorMin,\n          this.backgroundColorMax\n      )\n      ctx.fillRect(0, 0, this.contentWidth, this.contentHeight)\n      // 绘制文字\n      for (let i = 0; i < this.identifyCode.length; i++) {\n        this.drawText(ctx, this.identifyCode[i], i)\n      }\n      this.drawLine(ctx)\n      this.drawDot(ctx)\n    },\n    drawText (ctx, txt, i) {\n      ctx.fillStyle = this.randomColor(this.colorMin, this.colorMax)\n      ctx.font =\n          this.randomNum(this.fontSizeMin, this.fontSizeMax) + 'px SimHei'\n      let x = (i + 1) * (this.contentWidth / (this.identifyCode.length + 1))\n      let y = this.randomNum(this.fontSizeMax, this.contentHeight - 5)\n      let deg = this.randomNum(-30, 30)\n      // 修改坐标原点和旋转角度\n      ctx.translate(x, y)\n      ctx.rotate(deg * Math.PI / 270)\n      ctx.fillText(txt, 0, 0)\n      // 恢复坐标原点和旋转角度\n      ctx.rotate(-deg * Math.PI / 270)\n      ctx.translate(-x, -y)\n    },\n    drawLine (ctx) {\n      // 绘制干扰线\n      for (let i = 0; i < 2; i++) {\n        ctx.strokeStyle = this.randomColor(\n            this.lineColorMin,\n            this.lineColorMax\n        )\n        ctx.beginPath()\n        ctx.moveTo(\n            this.randomNum(0, this.contentWidth),\n            this.randomNum(0, this.contentHeight)\n        )\n        ctx.lineTo(\n            this.randomNum(0, this.contentWidth),\n            this.randomNum(0, this.contentHeight)\n        )\n        ctx.stroke()\n      }\n    },\n    drawDot (ctx) {\n      // 绘制干扰点\n      for (let i = 0; i < 20; i++) {\n        ctx.fillStyle = this.randomColor(0, 255)\n        ctx.beginPath()\n        ctx.arc(\n            this.randomNum(0, this.contentWidth),\n            this.randomNum(0, this.contentHeight),\n            1,\n            0,\n            2 * Math.PI\n        )\n        ctx.fill()\n      }\n    }\n  },\n  watch: {\n    identifyCode () {\n      this.drawPic()\n    }\n  },\n  mounted () {\n    this.drawPic()\n  }\n}\n</script>\n<style lang=\"less\" scoped>\ns-canvas {\n  height: 38px;\n}\n</style>"]}]}